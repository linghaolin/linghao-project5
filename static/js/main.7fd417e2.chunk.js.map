{"version":3,"sources":["firebase.js","GetInput.js","CardDeck.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","library","add","faPlus","faBackward","GetInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","userInput","target","value","setState","url","handleSubmit","console","log","preventDefault","inputArr","state","inputId","split","getQuestionTitle","then","title","id","question","catch","alert","getAnswerBody","string","answer","error","axios","method","dataResponse","params","site","sort","filter","res","data","items","body_markdown","handleConfirm","dbRef","database","ref","push","handleEdit","textareaView","handleTextChange","userText","handleConfirmEdit","validInput","react_default","a","createElement","className","action","onSubmit","type","name","placeholder","onChange","react_markdown_default","source","onClick","cols","rows","index_es","icon","props","onBack","Component","faTimes","CardDeck","randomizeCard","cards","Math","floor","random","length","randomCard","flipped","handleDelete","cardIndex","indexOf","cardId","keys","remove","_this2","on","val","key","_this3","Flipcard_default","e","App","showDeck","view","showSubmit","showOriginal","src_GetInput_0","src_CardDeck_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.7fd417e2.chunk.js","sourcesContent":["import firebase from 'firebase'; \n\n// Initialize Firebase\n    var config = {\n    apiKey: \"AIzaSyDWHPZXT5PJUNe-7urGa64ZSLKyPQOpePQ\",\n    authDomain: \"stackoverflow-flashcards.firebaseapp.com\",\n    databaseURL: \"https://stackoverflow-flashcards.firebaseio.com\",\n    projectId: \"stackoverflow-flashcards\",\n    storageBucket: \"stackoverflow-flashcards.appspot.com\",\n    messagingSenderId: \"543251906381\"\n      };\n    firebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport axios from 'axios';\nimport ReactMarkdown from 'react-markdown';\nimport './GetInput.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport { faBackward } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faPlus)\nlibrary.add(faBackward)\n\nclass GetInput extends Component{\n    constructor(){\n        super();\n        this.state = {\n            url: '',\n            validInput: true,\n            id: '',\n            question: '',\n            answer: '',\n            textareaView: false,\n        };\n    }\n\n// step1, put event handler on input, so the state will listen to the changes of user input.\n    handleChange = (event) => {\n    const userInput = event.target.value;\n    \n    // update state\n    this.setState({\n        url: userInput\n    });\n}\n\n// step2: click submit button, trigger event handler\n//call API, set state on answers\nhandleSubmit = (event) => {\n    console.log(\"submit\");\n    \n    event.preventDefault();\n    \n    //split the url to get the information that's needed to call API\n    // url format: https://stackoverflow.com/questions/22639296/force-mobile-browser-zoom-out-with-javascript?noredirect=1&lq=1\n    let inputArr = this.state.url;\n    inputArr = inputArr.split('/');\n    \n    //store id in variable\n    const inputId = inputArr[4];\n    \n    //step5: call api, to get the question\n    //store the result in state\n    this.getQuestionTitle(inputId)\n        .then((title) => {\n            this.setState({\n                id: inputId,\n                question: title\n            });\n        })\n        .catch(() => {\n            alert('Sorry, you input is invalid, please try to copy paste your link again.' );\n        });\n    \n    //step6: call api, to get the answer\n     //store the result in state\n    this.getAnswerBody(inputId)\n    .then((string) => {\n        this.setState({\n            answer: string,\n            url: ''\n        });\n    })\n    .catch((error) => {\n        console.log(error);\n    });\n}\n\n// Step3: call API with the id from user input\n//questions api is different from answers api, so it should be called seperately.\n//.title is where the questions body stored \n    getQuestionTitle = (id) => {\n        // https://api.stackexchange.com/2.2/questions/1026069/answers?site=stackoverflow&filter=withbody&sort=votes\n        return axios({\n            method: 'GET',\n            url: 'https://api.stackexchange.com/2.2/questions/' + id + '',\n            dataResponse: 'json',\n            params: {\n                'site': 'stackoverflow',\n                'sort': 'votes',\n                'filter': '!9Z(-wzftf'\n            }\n        })\n            .then((res) => {\n                return res.data.items[0].title;\n            });\n    }\n\n//step4: call API tp get the answer related to the target question\n//passing the id come from submit function into API call function, to get the highest voted answer from target question\n//.body_markdown is where the answers stored.\n    getAnswerBody = (id) => {\n    // https://api.stackexchange.com/2.2/questions/1026069/answers?site=stackoverflow&filter=withbody&sort=votes\n        return axios({\n            method:'GET',\n            url: 'https://api.stackexchange.com/2.2/questions/' + id + '/answers',\n            dataResponse: 'json',\n            params: {\n             'site': 'stackoverflow',\n             'sort': 'votes',\n             'filter': '!9Z(-wzftf'\n            }\n        })\n        .then((res) => {\n            return res.data.items[0].body_markdown;\n        });\n    }\n\n//step7: print the result on page, to let user to confirm result, click confirm button, send the data from state to firebase\n    handleConfirm = (event) => {\n        event.preventDefault();\n        const dbRef = firebase.database().ref();\n\n        if(this.state.question){\n            dbRef.push({\n                question: this.state.question,\n                answer: this.state.answer\n            })\n        }else{\n            alert('Please paste your link and retrieve answer first!');\n        }\n        //clear state\n        this.setState({\n            id: '',\n            question: '',\n            answer: '' \n        })\n    }\n\n    // step8: make the answer editable\n    handleEdit = () => {\n        this.setState({\n            textareaView: true\n        })\n    }\n\n    // step9: when user click confirm button, set answer's state\n    handleTextChange = (event) => {\n        const userText = event.target.value;\n        \n        this.setState({\n            answer: userText\n        })\n    }\n\n    handleConfirmEdit = () => {\n        this.setState({\n            textareaView: false,\n        })\n    }\n\n\n    render(){\n        // step10: take user input, and submit input data with submit buttom\n        // call API with userinput.\n        // print the result on page\n        return(\n            <div className=\"getInput\">\n                <h1>Copy and paste your stack<span>overflow</span> link here</h1>\n                <form action=\"submit\" onSubmit={this.handleSubmit}>\n                    <input type=\"text\" name=\"question\" placeholder='Please place stackoverflow url' onChange={this.handleChange} value={this.state.url}/>\n                    <button className=\"showButton\" type=\"submit\">{'Show Q&A'}</button>\n                </form>\n            \n                <section>\n                    {\n                        this.state.answer ? (\n                            <div className=\"print\">\n                                <p className=\"title\">Question: </p>\n                                <ReactMarkdown source={this.state.question} />\n\n                                <p className=\"title\">Answer: </p>\n                                <div className=\"answerContainer\">\n                                    <div className=\"buttonContainer\">\n                                        <button className=\"editButton\" onClick={this.handleEdit}>Edit</button>\n                                        <button className=\"confirmEditbutton\" onClick={this.handleConfirmEdit}>Confirm</button>\n                                    </div>\n                                    {this.state.textareaView?\n                                        <textarea type=\"text\" name=\"editAnswer\" cols=\"30\" rows=\"10\" onChange={this.handleTextChange}>{this.state.answer}</textarea>\n                                    : <ReactMarkdown source={this.state.answer} />}\n                                </div>\n                            </div>\n                            ) : null\n                    }\n                    <button className=\"confirmButton\" onClick={this.handleConfirm}>Add to my card deck! <FontAwesomeIcon icon=\"plus\" /></button>\n                </section>\n\n                <button className=\"backButton\" onClick={this.props.onBack}>Back <FontAwesomeIcon icon=\"backward\" /></button>\n            </div>\n        );\n    }\n}\n\nexport default GetInput;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport ReactMarkdown from 'react-markdown';\nimport Flipcard from '@kennethormandy/react-flipcard';\nimport '@kennethormandy/react-flipcard/dist/Flipcard.css';\nimport './CardDeck.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBackward } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faBackward)\nlibrary.add(faTimes)\n\nclass CardDeck extends Component {\n    constructor(){\n        super();\n        this.state = {\n            keys: [],\n            cards: [],\n            flipped: false,\n            randomCard: {}\n        }\n    }\n    //step1: fetch data from firebase\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', res => {\n            const cards = [];\n            const keys = [];\n            const data = res.val();\n            if(!data){\n                return <div />;\n            }else{\n                // push into state\n                for(let key in data){\n                    cards.push({\n                        question: data[key].question,\n                        answer: data[key].answer,\n                    })\n                    keys.push(key);\n                }\n            }\n\n            //step3: randomize cards, choose only one card to store in state, which is used to print page when renders\n            let randomCard = this.randomizeCard(cards);\n\n            this.setState({\n                cards: cards,\n                randomCard: randomCard,\n                keys: keys\n            });\n        })\n    }\n    \n    // step4: randomize the card function to only put one in state under random card\n    randomizeCard = (cards) => {        \n        const randomNum = Math.floor(Math.random() * this.state.cards.length);\n        return cards[randomNum];\n    }\n    \n    // step5: event handler on next button, so user can switch card for next one\n    //the switch function only can be called when there are more than 2 cards in state\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        if(this.state.cards.length > 2){\n            this.setState({\n                randomCard: this.randomizeCard(this.state.cards),\n                flipped: false\n            });\n        } else if (this.state.cards.length === 1){\n            alert('Sorry, you only have one card now.')\n        } else {\n            alert('Sorry, you have no card to show, please add some new and come back to check them out.')\n        }\n    }\n\n    // step7: delete the card from firebase if user clicks delete button\n    handleDelete = (event) => {\n        event.preventDefault();\n        let cards = this.state.cards;\n        let randomCard = this.state.randomCard;\n        let cardIndex = cards.indexOf(randomCard);\n        let cardId = this.state.keys[cardIndex];\n\n        if(cards.length < 1){\n            alert(\"Sorry, you have no cards to delete\");\n        }else{\n            const dbRef = firebase.database().ref(cardId);\n            dbRef.remove();\n        }\n    }\n\n    // step6：print the card on page\n    render(){\n        // if(!this.state.randomCard) return <div />\n        return(\n            <div className=\"cardDeck\">\n\n                <h1>Click the <span>card</span> to check the answer</h1>\n                <div className=\"flashCard\">\n                <Flipcard flipped={this.state.flipped} onClick={e => this.setState({ flipped: !this.state.flipped })}>\n                    <ReactMarkdown source={this.state.randomCard.question} />\n                    <ReactMarkdown source={this.state.randomCard.answer} />\n                </Flipcard>\n                </div>\n                <div className=\"buttonContainer\">\n                    <button className=\"nextButton\" onClick={this.handleSubmit}>Next</button>\n                    <button className=\"deleteButton\" onClick={this.handleDelete}>Delete this card <FontAwesomeIcon icon=\"times\" /></button>\n                </div>\n                <button className=\"backButton\" onClick={this.props.onBack}>Back <FontAwesomeIcon icon=\"backward\" /></button>\n\n            </div>\n        )\n    }\n}\n\nexport default CardDeck;\n","import React, { Component } from 'react';\nimport GetInput from './GetInput';\nimport CardDeck from './CardDeck';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nlibrary.add(faPlus)\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      view: ''\n    }\n  }\n\n  //set different views for different component\n  //with the eventlistener on different button\n  showDeck = () => {\n    this.setState({\n      view:'deck'\n    })\n  }\n\n  showSubmit = () => {\n    this.setState({\n      view:'submit'\n    })\n  }\n\n  // working as props for the other 2 component to get back to the main page\n  showOriginal = () => {\n    this.setState({\n      view: ''\n    })\n  }\n\n  render() {\n    //if the user click \"my card\" , go to card deck.\n    //if the user click \"add new\" , go to new input page.\n    if(this.state.view === 'submit'){\n      return (<GetInput onBack={this.showOriginal}/>);\n    } else if (this.state.view === 'deck'){\n      return(<CardDeck onBack={this.showOriginal}/>);\n    }else return(\n      <div className=\"app\">\n        <h1 className=\"header\">My Stack<span>OverFlow</span> Flash Cards</h1>\n        <div className=\"buttonContainer\">\n          <button onClick={this.showDeck}>My Cards</button>\n          <button onClick={this.showSubmit}>Add New <FontAwesomeIcon icon=\"plus\" /></button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}